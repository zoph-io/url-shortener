AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: zoph.io - url-shortener - https://zoph.io - December 2022
###########################################################
Parameters:
  ###########################################################
  pEnv:
    Type: String
  pAWSRegion:
    Type: String
  pProjectName:
    Type: String
  pProductName:
    Type: String
  pMinChar:
    Type: String
  pMaxChar:
    Type: String
  pDescription:
    Type: String
  pAlertsRecipient:
    Type: String
  pCertificateArn:
    Type: String
  pHostedZoneId:
    Type: String
  pDomain:
    Type: String
  pSubDomain:
    Type: String
  pFallbackUrl:
    Type: String

###########################################################
Resources:
  ###########################################################
  ShortenerFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub ${pProductName}-${pProjectName}-${pEnv}
      Description: !Ref pDescription
      Handler: handlers.main
      Runtime: python3.10
      CodeUri: ../shortener/
      Events:
        Create:
          Type: Api
          Properties:
            Path: /create
            Method: post
            RestApiId:
              Ref: APIGateway
        Retreive:
          Type: Api
          Properties:
            Path: /{shortid}
            Method: get
            RestApiId:
              Ref: APIGateway
      MemorySize: 256
      Architectures:
        - arm64
      Timeout: 300
      Environment:
        Variables:
          DOMAIN: !Ref pDomain
          SUB_DOMAIN: !Ref pSubDomain
          FALLBACK_URL: !Ref pFallbackUrl
          ENVIRONMENT: !Ref pEnv
          TABLE_NAME: !Sub "${pProductName}-${pProjectName}-url-table-${pEnv}"
          REGION: !Ref pAWSRegion
          MIN_CHAR: !Ref pMinChar
          MAX_CHAR: !Ref pMaxChar
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !GetAtt UrlDynamoTable.Arn
      Tags:
        Project: !Ref pProjectName
        Product: !Ref pProductName
        Environment: !Ref pEnv
        Endpoint: !Sub ${pSubDomain}.${pDomain}

  APIGateway:
    Type: AWS::Serverless::Api
    DependsOn: ShortenerFunction
    Properties:
      Domain:
        DomainName: !Sub ${pSubDomain}.${pDomain}
        CertificateArn: !Ref pCertificateArn
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneId: !Ref pHostedZoneId
      StageName: prod
      DisableExecuteApiEndpoint: true
      DefinitionBody:
        swagger: 2.0
        info:
          version: "1.0"
          title: !Sub ${pProductName}-${pProjectName}-api-${pEnv}
        basePath: /prod
        schemes:
          - "https"
        paths:
          /create:
            post:
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShortenerFunction.Arn}/invocations"
                httpMethod: "POST"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /{shortid}:
            get:
              consumes:
                - "application/json"
              parameters:
                - name: "shortid"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "301":
                  description: "301 response"
                  headers:
                    Location:
                      type: "string"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShortenerFunction.Arn}/invocations"
                httpMethod: "POST"
                responses:
                  default:
                    statusCode: "301"
                    responseParameters:
                      method.response.header.Location: "integration.response.body.location"
                requestTemplates:
                  application/json: "{\n    \"short_id\": \"$input.params('shortid')\"\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"

  UrlDynamoTable:
    Type: AWS::DynamoDB::Table
    # DeletionPolicy: Retain
    # UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: short_id
          AttributeType: S
      KeySchema:
        - AttributeName: short_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      TableName: !Sub "${pProductName}-${pProjectName}-url-table-${pEnv}"
      Tags:
        - Key: Project
          Value: !Ref pProjectName
        - Key: Product
          Value: !Ref pProductName
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  ShortenerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${pProductName}-${pProjectName}-${pEnv}"
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: !Ref pProjectName
        - Key: Product
          Value: !Ref pProductName

  ShortenerCloudWatchLogsMetricsFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: "ERROR"
      LogGroupName: !Sub "/aws/lambda/${pProductName}-${pProjectName}-${pEnv}"
      MetricTransformations:
        - MetricValue: "1"
          MetricNamespace: !Sub ${pProductName}-${pProjectName}-${pEnv}
          MetricName: "ERROR"
          DefaultValue: 0
    DependsOn: ShortenerLambdaLogGroup

  ShortenerErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref AlertingTopic
      AlarmDescription: !Sub "Alarm for ERROR on ${pProductName}-${pProjectName}-${pEnv} function"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: ERROR
      Namespace: !Sub ${pProductName}-${pProjectName}-${pEnv}
      OKActions:
        - !Ref AlertingTopic
      Period: 10
      Statistic: Sum
      Threshold: 1
      TreatMissingData: ignore

  AlertingTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: !Sub "[${pEnv}] Alarm Topic for ${pProductName}-${pProjectName}"
      Subscription:
        - Protocol: email
          Endpoint: !Ref pAlertsRecipient
      Tags:
        - Key: Project
          Value: !Ref pProjectName
        - Key: Product
          Value: !Ref pProductName
